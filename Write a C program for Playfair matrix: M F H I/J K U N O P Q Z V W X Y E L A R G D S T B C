#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

// Function to find the position of a character in the matrix
void findPosition(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I'; // I/J treated as the same
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Decrypt a digraph using Playfair rules
void decryptDigraph(char a, char b, char *out1, char *out2) {
    int r1, c1, r2, c2;
    findPosition(a, &r1, &c1);
    findPosition(b, &r2, &c2);

    if (r1 == r2) {
        // Same row: move left
        *out1 = matrix[r1][(c1 + SIZE - 1) % SIZE];
        *out2 = matrix[r2][(c2 + SIZE - 1) % SIZE];
    } else if (c1 == c2) {
        // Same column: move up
        *out1 = matrix[(r1 + SIZE - 1) % SIZE][c1];
        *out2 = matrix[(r2 + SIZE - 1) % SIZE][c2];
    } else {
        // Rectangle: swap columns
        *out1 = matrix[r1][c2];
        *out2 = matrix[r2][c1];
    }
}

// Decrypt the ciphertext
void decryptMessage(const char *ciphertext, char *plaintext) {
    int len = strlen(ciphertext);
    int j = 0;
    for (int i = 0; i < len; i += 2) {
        char a = toupper(ciphertext[i]);
        char b = toupper(ciphertext[i + 1]);

        if (a < 'A' || a > 'Z' || b < 'A' || b > 'Z') continue;

        char d1, d2;
        decryptDigraph(a, b, &d1, &d2);

        plaintext[j++] = d1;
        plaintext[j++] = d2;
    }
    plaintext[j] = '\0';
}

int main() {
    char ciphertext[256], plaintext[256];

    printf("Enter the Playfair ciphertext (no spaces):\n");
    scanf("%s", ciphertext);

    decryptMessage(ciphertext, plaintext);

    printf("Decrypted plaintext:\n%s\n", plaintext);

    return 0;
}
