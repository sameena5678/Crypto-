#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE];

// Function to remove duplicates from keyword and build matrix
void generateKeyMatrix(char key[]) {
    int used[26] = {0};
    int x = 0, y = 0;
    
    for (int i = 0; key[i]; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (ch < 'A' || ch > 'Z') continue;
        if (!used[ch - 'A']) {
            matrix[y][x++] = ch;
            used[ch - 'A'] = 1;
            if (x == SIZE) { x = 0; y++; }
        }
    }

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue;
        if (!used[ch - 'A']) {
            matrix[y][x++] = ch;
            used[ch - 'A'] = 1;
            if (x == SIZE) { x = 0; y++; }
        }
    }
}

void findPosition(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int y = 0; y < SIZE; y++)
        for (int x = 0; x < SIZE; x++)
            if (matrix[y][x] == ch) {
                *row = y;
                *col = x;
                return;
            }
}

void decryptDigraph(char a, char b, char *out1, char *out2) {
    int row1, col1, row2, col2;
    findPosition(a, &row1, &col1);
    findPosition(b, &row2, &col2);

    if (row1 == row2) {
        // Same row
        *out1 = matrix[row1][(col1 + SIZE - 1) % SIZE];
        *out2 = matrix[row2][(col2 + SIZE - 1) % SIZE];
    } else if (col1 == col2) {
        // Same column
        *out1 = matrix[(row1 + SIZE - 1) % SIZE][col1];
        *out2 = matrix[(row2 + SIZE - 1) % SIZE][col2];
    } else {
        // Rectangle
        *out1 = matrix[row1][col2];
        *out2 = matrix[row2][col1];
    }
}

void decryptMessage(const char *ciphertext, char *plaintext) {
    int len = strlen(ciphertext);
    int j = 0;

    for (int i = 0; i < len; i += 2) {
        char a = toupper(ciphertext[i]);
        char b = toupper(ciphertext[i+1]);
        if (a < 'A' || a > 'Z') continue;
        if (b < 'A' || b > 'Z') continue;

        char d1, d2;
        decryptDigraph(a, b, &d1, &d2);
        plaintext[j++] = d1;
        plaintext[j++] = d2;
    }
    plaintext[j] = '\0';
}

void printMatrix() {
    printf("\nKey Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++)
            printf("%c ", matrix[i][j]);
        printf("\n");
    }
}

int main() {
    char keyword[] = "MONARCHY";  // or any other keyword
    char ciphertext[] =
        "KXJEYUREBEZWEHEWRYTUHEYFS"
        "KREHEGOYFIWTTTUOLKSYCAJPO"
        "BOTEIZONTXBYBNTGONEYCUZWR"
        "GDSONSXBOUYWRHEBAAHYUSEDQ";

    char plaintext[512];

    generateKeyMatrix(keyword);
    printMatrix();

    decryptMessage(ciphertext, plaintext);

    printf("\nDecrypted Message:\n%s\n", plaintext);

    return 0;
}
