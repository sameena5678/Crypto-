#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function for modular exponentiation
long long modexp(long long base, long long exp, long long mod) {
    long long result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp % 2)
            result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    // Public values
    long long q = 353;      // A large prime
    long long a = 3;        // Primitive root modulo q

    // Alice's secret
    long long x = 97;
    long long A = modexp(a, x, q);

    // Bob's secret
    long long y = 233;
    long long B = modexp(a, y, q);

    // Exchange A and B, compute shared key
    long long keyAlice = modexp(B, x, q); // B^x mod q
    long long keyBob   = modexp(A, y, q); // A^y mod q

    printf("Public: q = %lld, a = %lld\n", q, a);
    printf("Alice's secret x = %lld\n", x);
    printf("Bob's secret y = %lld\n", y);
    printf("Alice sends: %lld\n", A);
    printf("Bob sends: %lld\n", B);
    printf("Shared key (Alice computes): %lld\n", keyAlice);
    printf("Shared key (Bob computes):   %lld\n", keyBob);

    if (keyAlice == keyBob)
        printf("Key exchange successful!\n");
    else
        printf("Key exchange failed.\n");

    return 0;
}
