#include <stdio.h>

// Compute GCD using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Extended Euclidean Algorithm to find modular inverse
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0; *y = 1;
        return b;
    }

    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}

int mod_inverse(int e, int phi) {
    int x, y;
    int g = extended_gcd(e, phi, &x, &y);
    if (g != 1)
        return -1;
    return (x % phi + phi) % phi;
}

int main() {
    // Example values
    int n = 3599;      // RSA modulus (p × q)
    int e = 31;        // Public key
    int m = 61;        // Known plaintext block (assumed to share a factor with n)

    // Step 1: Compute gcd(m, n)
    int g = gcd(m, n);
    if (g == 1) {
        printf("No useful information: gcd(m, n) = 1\n");
        return 0;
    }

    int p = g;
    int q = n / p;

    // Step 2: Compute φ(n)
    int phi = (p - 1) * (q - 1);

    // Step 3: Compute private key d
    int d = mod_inverse(e, phi);

    printf("GCD found: p = %d\n", p);
    printf("Other factor: q = %d\n", q);
    printf("φ(n) = %d\n", phi);
    printf("Private key (d) = %d\n", d);

    return 0;
}
