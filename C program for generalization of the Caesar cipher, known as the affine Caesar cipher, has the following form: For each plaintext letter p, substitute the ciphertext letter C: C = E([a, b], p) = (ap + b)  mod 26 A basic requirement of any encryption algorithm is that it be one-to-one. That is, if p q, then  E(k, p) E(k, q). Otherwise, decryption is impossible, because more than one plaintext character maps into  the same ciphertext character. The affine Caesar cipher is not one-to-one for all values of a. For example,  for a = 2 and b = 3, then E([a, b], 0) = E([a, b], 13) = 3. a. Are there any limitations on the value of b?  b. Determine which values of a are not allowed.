#include <stdio.h>
#include <ctype.h>

// Function to find modular inverse of a modulo 26
int modInverse(int a) {
    a = a % 26;
    for (int x = 1; x < 26; x++) {
        if ((a * x) % 26 == 1)
            return x;
    }
    return -1; // No modular inverse exists
}

// Function to encrypt using affine cipher
char encryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        return ((a * (ch - 'A') + b) % 26) + 'A';
    }
    return ch;
}

// Function to decrypt using affine cipher
char decryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        int a_inv = modInverse(a);
        if (a_inv == -1) {
            printf("Invalid 'a' value. No modular inverse exists.\n");
            return ch;
        }
        return (a_inv * ((ch - 'A' - b + 26) % 26)) % 26 + 'A';
    }
    return ch;
}

int main() {
    char text[100];
    int a, b;

    printf("Enter a (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter b (0-25): ");
    scanf("%d", &b);

    if (modInverse(a) == -1) {
        printf("Error: 'a' must be coprime with 26. Encryption not possible.\n");
        return 1;
    }

    printf("Enter plaintext (uppercase or lowercase letters): ");
    scanf("%s", text);

    printf("Encrypted text: ");
    for (int i = 0; text[i] != '\0'; i++)
        printf("%c", encryptChar(text[i], a, b));

    printf("\nDecrypted text: ");
    for (int i = 0; text[i] != '\0'; i++)
        printf("%c", decryptChar(text[i], a, b));

    printf("\n");
    return 0;
}
