#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 26

// Function to encrypt using monoalphabetic substitution cipher
void encrypt(char* plaintext, char* key, char* ciphertext) {
    for (int i = 0; plaintext[i] != '\0'; ++i) {
        char ch = plaintext[i];

        if (isupper(ch)) {
            ciphertext[i] = toupper(key[ch - 'A']);
        }
        else if (islower(ch)) {
            ciphertext[i] = tolower(key[ch - 'a']);
        }
        else {
            ciphertext[i] = ch;  // leave non-alphabetic characters unchanged
        }
    }
}

// Function to validate that the key is a permutation of the alphabet
int isValidKey(char* key) {
    int seen[SIZE] = {0};

    for (int i = 0; i < SIZE; ++i) {
        if (!isalpha(key[i]))
            return 0;
        int index = toupper(key[i]) - 'A';
        if (seen[index])
            return 0;
        seen[index] = 1;
    }

    return 1;
}

int main() {
    char key[SIZE + 1];
    char plaintext[1000], ciphertext[1000];

    printf("Enter a 26-letter substitution key (no repeated letters):\n");
    scanf("%s", key);

    if (strlen(key) != SIZE || !isValidKey(key)) {
        printf("Invalid key! It must contain 26 unique alphabetic characters.\n");
        return 1;
    }

    getchar(); // Consume newline left in buffer
    printf("Enter plaintext message to encrypt:\n");
    fgets(plaintext, sizeof(plaintext), stdin);

    encrypt(plaintext, key, ciphertext);

    printf("Encrypted message:\n%s\n", ciphertext);

    return 0;
}
