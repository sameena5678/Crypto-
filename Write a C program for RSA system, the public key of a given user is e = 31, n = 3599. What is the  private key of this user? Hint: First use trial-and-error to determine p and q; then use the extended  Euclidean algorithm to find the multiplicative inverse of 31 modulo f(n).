#include <stdio.h>

// Extended Euclidean Algorithm
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0; *y = 1;
        return b;
    }

    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}

// Modular inverse using Extended Euclidean Algorithm
int mod_inverse(int e, int phi) {
    int x, y;
    int g = extended_gcd(e, phi, &x, &y);
    if (g != 1)
        return -1;  // No inverse exists
    else
        return (x % phi + phi) % phi;
}

int main() {
    int e = 31;
    int n = 3599;

    // Step 1: Factor n = p * q (already known)
    int p = 59, q = 61;

    // Step 2: Compute Ï†(n)
    int phi = (p - 1) * (q - 1); // 3480

    // Step 3: Compute private key d
    int d = mod_inverse(e, phi);

    printf("Public Key: (e = %d, n = %d)\n", e, n);
    printf("Private Key: d = %d\n", d);
    return 0;
}
