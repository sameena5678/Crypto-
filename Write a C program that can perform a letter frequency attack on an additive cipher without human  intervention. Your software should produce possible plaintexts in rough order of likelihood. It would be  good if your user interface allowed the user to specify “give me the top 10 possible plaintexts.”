#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_TEXT_LEN 1024
#define ALPHABET_SIZE 26

// English letter frequency (relative, for scoring)
double english_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228,
    2.015, 6.094, 6.966, 0.153, 0.772, 4.025,
    2.406, 6.749, 7.507, 1.929, 0.095, 5.987,
    6.327, 9.056, 2.758, 0.978, 2.360, 0.150,
    1.974, 0.074
};

// Score a string based on English frequency
double score_text(const char *text) {
    int count[ALPHABET_SIZE] = {0};
    int total = 0;
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            count[toupper(text[i]) - 'A']++;
            total++;
        }
    }

    if (total == 0) return 0;

    double score = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double observed = (double)count[i] / total * 100;
        score += english_freq[i] * observed;
    }
    return score;
}

// Decrypt additive cipher with given key
void decrypt_caesar(const char *cipher, char *output, int key) {
    for (int i = 0; cipher[i]; i++) {
        if (isalpha(cipher[i])) {
            char base = isupper(cipher[i]) ? 'A' : 'a';
            output[i] = ((cipher[i] - base - key + ALPHABET_SIZE) % ALPHABET_SIZE) + base;
        } else {
            output[i] = cipher[i];
        }
    }
    output[strlen(cipher)] = '\0';
}

typedef struct {
    int key;
    char text[MAX_TEXT_LEN];
    double score;
} Result;

int compare_results(const void *a, const void *b) {
    Result *r1 = (Result *)a;
    Result *r2 = (Result *)b;
    if (r2->score > r1->score) return 1;
    else if (r2->score < r1->score) return -1;
    return 0;
}

int main() {
    char cipher[MAX_TEXT_LEN];
    int top_n;

    printf("Enter the ciphertext (additive cipher):\n");
    fgets(cipher, MAX_TEXT_LEN, stdin);
    cipher[strcspn(cipher, "\n")] = '\0';

    printf("Enter number of top results to display (max 26): ");
    scanf("%d", &top_n);
    if (top_n > 26) top_n = 26;

    Result results[ALPHABET_SIZE];

    for (int key = 0; key < ALPHABET_SIZE; key++) {
        decrypt_caesar(cipher, results[key].text, key);
        results[key].key = key;
        results[key].score = score_text(results[key].text);
    }

    qsort(results, ALPHABET_SIZE, sizeof(Result), compare_results);

    printf("\nTop %d possible plaintexts based on letter frequency:\n", top_n);
    for (int i = 0; i < top_n; i++) {
        printf("Key = %2d | Score = %.2f | Plaintext: %s\n",
               results[i].key, results[i].score, results[i].text);
    }

    return 0;
}
